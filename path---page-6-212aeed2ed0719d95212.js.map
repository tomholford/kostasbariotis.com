{"version":3,"sources":["webpack:///path---page-6-212aeed2ed0719d95212.js","webpack:///./.cache/json/page-6.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/page-6.json","module","exports","data","site","siteMetadata","title","description","siteUrl","pathContext","posts","excerpt","html","id","timeToRead","frontmatter","date","path","tags","draft","page","pagesSum","prevPath","nextPath"],"mappings":"AAAAA,cAAc,iBAERC,gEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,YAAA,2LAAAC,QAAA,gCAAkRC,aAAgBC,QAAUC,QAAA,+PAAAC,KAAA,64HAAktFC,GAAA,yHAAAC,WAAA,EAAAC,aAAumDC,KAAA,2BAAAC,KAAA,sBAAAC,KAAA,8BAAAZ,MAAA,iCAAAa,MAAA,QAA6JR,QAAA,4PAAAC,KAAA,o2LAA2uMC,GAAA,4IAAAC,WAAA,EAAAC,aAA8QC,KAAA,2BAAAC,KAAA,yCAAAC,KAAA,oBAAAZ,MAAA,uCAAAa,MAAA,QAA4KR,QAAA,+PAAAC,KAAA,g/EAAAC,GAAA,sIAAAC,WAAA,EAAAC,aAAy6FC,KAAA,2BAAAC,KAAA,mCAAAC,KAAA,YAAAZ,MAAA,iCAAAa,MAAA,QAAwJR,QAAA,8PAAAC,KAAA,uiBAAAC,GAAA,sHAAAC,WAAA,EAAAC,aAA+8BC,KAAA,2BAAAC,KAAA,mBAAAC,KAAA,KAAAZ,MAAA,iBAAAa,MAAA,QAAiHR,QAAA,kNAAAC,KAAA,4QAAAC,GAAA,oIAAAC,WAAA,EAAAC,aAAspBC,KAAA,2BAAAC,KAAA,iCAAAC,KAAA,KAAAZ,MAAA,gCAAAa,MAAA,QAA4IC,KAAA,EAAAC,SAAA,GAAAC,SAAA,UAAAC,SAAA","file":"path---page-6-212aeed2ed0719d95212.js","sourcesContent":["webpackJsonp([195745506856481],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/page-6.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Fortunately, I have been lucky enough to work with a lot of dev teams.  Good  and bad. I've seen teams with a sickness so deeply in their DNA that they were doomed to fail. I've also seen teams that gets  you up in the morning  while looking forward...\",\"html\":\"<p>Fortunately, I have been lucky enough to work with a lot of dev teams. <a href=\\\"http://www.lifehack.org/articles/work/10-signs-you-are-working-happy-workplace.html\\\">Good</a> and bad.</p>\\n<p>I've seen teams with a sickness so deeply in their DNA that they were doomed to fail. I've also seen teams that gets <a href=\\\"http://www.leadertoleaderjournal.com/sample-articles/the-importance-of-happiness-in-the-workplace.aspx\\\">you up in the morning</a> while looking forward to meet your colleagues.</p>\\n<p>But that team that keeps you in being that place and continue working with them, didn't happen accidentally. Someone created it. This is my list for a happy and efficient development team. Cause these two are tied together and evolving along side.</p>\\n<h3>Coding Style Guide</h3>\\n<p>is the new RFC. Force everyone to <a href=\\\"https://github.com/airbnb/javascript\\\">be in the same page</a>. As in every other social team, so and your team must <a href=\\\"https://github.com/google/styleguide\\\">meet rules</a> and follow them for the common good.</p>\\n<p>Everyone should write the same code. Otherwise, you'll end up with a huge code base that no one can understand, leave aside to scale it.</p>\\n<h3>Git &#x26;  Git flow</h3>\\n<p>or <a href=\\\"http://nvie.com/posts/a-successful-git-branching-model/\\\">in other words</a>. Now, this is the first and the last time I'm talking about this. If you don't keep your code under some kind of version control, there is nothing much left for you.</p>\\n<p>Version controlling your code means that you keep history of every file change, every line addition and deletion. Jumping from the present to a certain point of past, that you know your code was working will save you tone of hours of frustration and money.</p>\\n<h3>Dev Environments</h3>\\n<p>that simulates the live project. You make changes to the live site? No, it's not normal. No, no one does this any more. What it takes to be able to deliver the best to our clients? Is to test it for them, before them.</p>\\n<p>Make sure you can make a change to your project, or a replica of it, and be able to reproduce any sort of abnormality you can before it goes live.</p>\\n<h3>Automation</h3>\\n<p>is key. He/She who has ever worked at a fast grown company, knows that speed is priority. But keep doing the same process over and over again  can't be efficient. Find those processes. Automate them. Out source them. Hire people to do them and get back to your work.</p>\\n<h3>Tasks Assignment &#x26; Prioritisation</h3>\\n<p>that are visible by everyone, Making sure everyone knows what it has to be done. Most of the times, team will stay in idle state when they don't know what to do. Talks should be clear to everyone and allow them to do work for a given time before new tasks arrive and reassigned. Those tasks should be sorted by criticality - prioritisation should be respected.</p>\\n<h3>Responsibilities</h3>\\n<p>must be clear to everyone. Have you ever been in a situation where the manager asks why something happened and everyone in the team is looking each other? I know, it sucks. But clearly, there weren't no responsibilities. Keeping responsibilities clear means that everyone knows when it's time to stand up and take the response. So, the team can learn and continue.</p>\\n<h3>Document Everything</h3>\\n<p>because no one can guarantee you a job for ever like no manager can guarantee a team that would stay the same for ever. Documenting means that while the faces in team changes, the work can continue. Each new person coming can immediately  get in track and continue the task the someone left unfinished.</p>\\n<h2>Finally</h2>\\n<p>I would say that, when you're joining a team, you can't simply wait everyone to be as you would like to be. You may have to put a little something in the mix. Teams are not born perfect. It's the everyday inside process that will eventually mature and fill with wisdom the people behind. A perfect recipe to scale your team.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/scaling-your-team/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2015-09-10T17:33:38.000Z\",\"path\":\"/scaling-your-team/\",\"tags\":\"team, dev, scale, workplace\",\"title\":\"Be prepared to scale your team\",\"draft\":null}},{\"excerpt\":\"Today I lost a few hours trying to understand why a document that I was fetching through Mongoose, kept returning true against checking for a field with the   operator, even though the document didn't contain that field. But still it would return...\",\"html\":\"<p>Today I lost a few hours trying to understand why a document that I was fetching through Mongoose, kept returning true against checking for a field with the <code>in</code> operator, even though the document didn't contain that field.</p>\\n<p>But still it would return true:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> mongoose <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mongoose'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  Schema <span class=\\\"token operator\\\">=</span> mongoose<span class=\\\"token punctuation\\\">.</span>Schema<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> exampleSchema <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Schema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  someField<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  notExistingField<span class=\\\"token punctuation\\\">:</span> String\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> versionKey<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* We know that this document doesn't have the notExistingField in the DB */</span>\\nexampleSchema<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'_id'</span><span class=\\\"token punctuation\\\">:</span> id\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* { someField: 'value' } */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* undefined */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'notExistingField'</span> <span class=\\\"token keyword\\\">in</span> document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* true */</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The fact is that Mongoose will first comply the fetched document against the defined Schema in order for it's getters/setters functions to work. So even though, we can't see the <code>notExistingField</code>, the <code>in</code> operator will always return true.</p>\\n<p>A solution is to change the checking and check for an undefined value, like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* We know that this document doesn't have the notExistingField in the DB */</span>\\nexampleSchema<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'_id'</span><span class=\\\"token punctuation\\\">:</span> id\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* { someField: 'value' } */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* undefined */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* false */</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Fixed.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/mongoose-objects-and-the-in-operator/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-08-31T17:51:38.000Z\",\"path\":\"/mongoose-objects-and-the-in-operator/\",\"tags\":\"mongodb, mongoose\",\"title\":\"Mongoose objects and the IN operator\",\"draft\":null}},{\"excerpt\":\"Making a discoverable API means thats some software would be able to traverse it, by only providing it's root endpoint. For example, my IDE could provide me all the endpoints, input schemas and responses of Github's API by putting in it's root, that...\",\"html\":\"<p>Making a discoverable API means thats some software would be able to traverse it, by only providing it's root endpoint. For example, my IDE could provide me all the endpoints, input schemas and responses of Github's API by putting in it's root, that is <code>https://api.github.com</code>.</p>\\n<p>This can have some major advantages. Speed would be the absolute greatest, since I don't have to search through documentation and going back and forth their site. Also, in case of an endpoint changes it's name, the software will automatically adopt the new name.</p>\\n<p>Now, all these are definitely good, but we don't see that much of API's making themselves discoverable. Why is that? Well, mostly because speed is not that much of an issue, since REST is pretty explanatory it self, you only have a few verbs to respond to, so each API's documentation wouldn't be that much. As for the breaking changes, well putting a Version number in front of each endpoint seems to work pretty good.</p>\\n<p>The first thing that comes in mind when talking about discovering web services is Web Services Description Language(WSDL). Before the major adoption of REST principles, people would create APIs in different forms. And so a way to describe them was necessary. That's where WSDL would take action. REST on the other hand is not the same. When we hear an API is REST compliant, we know that uses the common HTTP verbs, can return/accept XML or JSON and respond with the known HTTP statuses codes. That is what REST APIs is all about.</p>\\n<p>Nevertheless, I would say that machines that talk to each other, that are indeed able to discover each other's resources, is a tasty subject and I'm pretty sure that we will see it really soon. At the mean time, let's focus on making our APIs usable and understandable with bare eye.</p>\\n<p>Here are some references you can use if you want to make your API's discoverable. You can check out these great specs about describing your API through it's responses. I am not sure how these can be widely adopted, but once they do, we should expect it to go big. Never used them, so I am expecting from you. Google's also has looked into this and came out with some really fascinated results, be sure to check them also.</p>\\n<p><a href=\\\"http://micro-api.org/\\\">http://micro-api.org/</a>\\n<a href=\\\"http://jsonapi.org/\\\">http://jsonapi.org/</a>\\n<a href=\\\"http://www.odata.org/\\\">http://www.odata.org/</a>\\n<a href=\\\"https://developers.google.com/discovery/\\\">https://developers.google.com/discovery/</a></p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/making-a-rest-api-discoverable/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2015-08-24T14:39:27.000Z\",\"path\":\"/making-a-rest-api-discoverable/\",\"tags\":\"rest, api\",\"title\":\"Making a REST API discoverable\",\"draft\":null}},{\"excerpt\":\"You won’t rush an architect. You don’t want to see your house becoming dust at the next earthquake.  You won’t rush your hairdresser. You don’t want to leave that place with one ear. You won’t rush your dentist. You can’t handle the pain. You won’t...\",\"html\":\"<p>You won’t rush an architect. You don’t want to see your house becoming dust at the next earthquake. </p>\\n<p>You won’t rush your hairdresser. You don’t want to leave that place with one ear.</p>\\n<p>You won’t rush your dentist. You can’t handle the pain.</p>\\n<p>You won’t rush your local restaurant chef. You know good beef takes time to cook.</p>\\n<p>You won’t rush your wife to deliver your baby in less than 9 months. Why would you?</p>\\n<p>But you will rush your developer to build the next Facebook in 48 hours.</p>\\n<p>It makes sense.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/it-makes-sense/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-07-15T18:38:24.000Z\",\"path\":\"/it-makes-sense/\",\"tags\":null,\"title\":\"It makes sense\",\"draft\":null}},{\"excerpt\":\"First, become the best in the room. Then find a room where everyone is better than you. Repeat. I know this piece is like 20 words long but could it be a spark for a great conversation? Leave your comment...\",\"html\":\"<ul>\\n<li>First, become the best in the room.</li>\\n<li>Then find a room where everyone is better than you.</li>\\n<li>Repeat.</li>\\n</ul>\\n<p>I know this piece is like 20 words long but could it be a spark for a great conversation?</p>\\n<p>Leave your comment...</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/are-you-the-best-in-the-room/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-07-11T15:07:57.000Z\",\"path\":\"/are-you-the-best-in-the-room/\",\"tags\":null,\"title\":\"Are you the best in the room?\",\"draft\":null}}],\"page\":6,\"pagesSum\":14,\"prevPath\":\"/page/5\",\"nextPath\":\"/page/7\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---page-6-212aeed2ed0719d95212.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Fortunately, I have been lucky enough to work with a lot of dev teams.  Good  and bad. I've seen teams with a sickness so deeply in their DNA that they were doomed to fail. I've also seen teams that gets  you up in the morning  while looking forward...\",\"html\":\"<p>Fortunately, I have been lucky enough to work with a lot of dev teams. <a href=\\\"http://www.lifehack.org/articles/work/10-signs-you-are-working-happy-workplace.html\\\">Good</a> and bad.</p>\\n<p>I've seen teams with a sickness so deeply in their DNA that they were doomed to fail. I've also seen teams that gets <a href=\\\"http://www.leadertoleaderjournal.com/sample-articles/the-importance-of-happiness-in-the-workplace.aspx\\\">you up in the morning</a> while looking forward to meet your colleagues.</p>\\n<p>But that team that keeps you in being that place and continue working with them, didn't happen accidentally. Someone created it. This is my list for a happy and efficient development team. Cause these two are tied together and evolving along side.</p>\\n<h3>Coding Style Guide</h3>\\n<p>is the new RFC. Force everyone to <a href=\\\"https://github.com/airbnb/javascript\\\">be in the same page</a>. As in every other social team, so and your team must <a href=\\\"https://github.com/google/styleguide\\\">meet rules</a> and follow them for the common good.</p>\\n<p>Everyone should write the same code. Otherwise, you'll end up with a huge code base that no one can understand, leave aside to scale it.</p>\\n<h3>Git &#x26;  Git flow</h3>\\n<p>or <a href=\\\"http://nvie.com/posts/a-successful-git-branching-model/\\\">in other words</a>. Now, this is the first and the last time I'm talking about this. If you don't keep your code under some kind of version control, there is nothing much left for you.</p>\\n<p>Version controlling your code means that you keep history of every file change, every line addition and deletion. Jumping from the present to a certain point of past, that you know your code was working will save you tone of hours of frustration and money.</p>\\n<h3>Dev Environments</h3>\\n<p>that simulates the live project. You make changes to the live site? No, it's not normal. No, no one does this any more. What it takes to be able to deliver the best to our clients? Is to test it for them, before them.</p>\\n<p>Make sure you can make a change to your project, or a replica of it, and be able to reproduce any sort of abnormality you can before it goes live.</p>\\n<h3>Automation</h3>\\n<p>is key. He/She who has ever worked at a fast grown company, knows that speed is priority. But keep doing the same process over and over again  can't be efficient. Find those processes. Automate them. Out source them. Hire people to do them and get back to your work.</p>\\n<h3>Tasks Assignment &#x26; Prioritisation</h3>\\n<p>that are visible by everyone, Making sure everyone knows what it has to be done. Most of the times, team will stay in idle state when they don't know what to do. Talks should be clear to everyone and allow them to do work for a given time before new tasks arrive and reassigned. Those tasks should be sorted by criticality - prioritisation should be respected.</p>\\n<h3>Responsibilities</h3>\\n<p>must be clear to everyone. Have you ever been in a situation where the manager asks why something happened and everyone in the team is looking each other? I know, it sucks. But clearly, there weren't no responsibilities. Keeping responsibilities clear means that everyone knows when it's time to stand up and take the response. So, the team can learn and continue.</p>\\n<h3>Document Everything</h3>\\n<p>because no one can guarantee you a job for ever like no manager can guarantee a team that would stay the same for ever. Documenting means that while the faces in team changes, the work can continue. Each new person coming can immediately  get in track and continue the task the someone left unfinished.</p>\\n<h2>Finally</h2>\\n<p>I would say that, when you're joining a team, you can't simply wait everyone to be as you would like to be. You may have to put a little something in the mix. Teams are not born perfect. It's the everyday inside process that will eventually mature and fill with wisdom the people behind. A perfect recipe to scale your team.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/scaling-your-team/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2015-09-10T17:33:38.000Z\",\"path\":\"/scaling-your-team/\",\"tags\":\"team, dev, scale, workplace\",\"title\":\"Be prepared to scale your team\",\"draft\":null}},{\"excerpt\":\"Today I lost a few hours trying to understand why a document that I was fetching through Mongoose, kept returning true against checking for a field with the   operator, even though the document didn't contain that field. But still it would return...\",\"html\":\"<p>Today I lost a few hours trying to understand why a document that I was fetching through Mongoose, kept returning true against checking for a field with the <code>in</code> operator, even though the document didn't contain that field.</p>\\n<p>But still it would return true:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> mongoose <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'mongoose'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n  Schema <span class=\\\"token operator\\\">=</span> mongoose<span class=\\\"token punctuation\\\">.</span>Schema<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> exampleSchema <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Schema</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  someField<span class=\\\"token punctuation\\\">:</span> String<span class=\\\"token punctuation\\\">,</span>\\n  notExistingField<span class=\\\"token punctuation\\\">:</span> String\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> versionKey<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* We know that this document doesn't have the notExistingField in the DB */</span>\\nexampleSchema<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'_id'</span><span class=\\\"token punctuation\\\">:</span> id\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* { someField: 'value' } */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* undefined */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'notExistingField'</span> <span class=\\\"token keyword\\\">in</span> document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* true */</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The fact is that Mongoose will first comply the fetched document against the defined Schema in order for it's getters/setters functions to work. So even though, we can't see the <code>notExistingField</code>, the <code>in</code> operator will always return true.</p>\\n<p>A solution is to change the checking and check for an undefined value, like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* We know that this document doesn't have the notExistingField in the DB */</span>\\nexampleSchema<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">findOne</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'_id'</span><span class=\\\"token punctuation\\\">:</span> id\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exec</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>err<span class=\\\"token punctuation\\\">,</span> document<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* { someField: 'value' } */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* undefined */</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>document<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'notExistingField'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/* false */</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Fixed.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/mongoose-objects-and-the-in-operator/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-08-31T17:51:38.000Z\",\"path\":\"/mongoose-objects-and-the-in-operator/\",\"tags\":\"mongodb, mongoose\",\"title\":\"Mongoose objects and the IN operator\",\"draft\":null}},{\"excerpt\":\"Making a discoverable API means thats some software would be able to traverse it, by only providing it's root endpoint. For example, my IDE could provide me all the endpoints, input schemas and responses of Github's API by putting in it's root, that...\",\"html\":\"<p>Making a discoverable API means thats some software would be able to traverse it, by only providing it's root endpoint. For example, my IDE could provide me all the endpoints, input schemas and responses of Github's API by putting in it's root, that is <code>https://api.github.com</code>.</p>\\n<p>This can have some major advantages. Speed would be the absolute greatest, since I don't have to search through documentation and going back and forth their site. Also, in case of an endpoint changes it's name, the software will automatically adopt the new name.</p>\\n<p>Now, all these are definitely good, but we don't see that much of API's making themselves discoverable. Why is that? Well, mostly because speed is not that much of an issue, since REST is pretty explanatory it self, you only have a few verbs to respond to, so each API's documentation wouldn't be that much. As for the breaking changes, well putting a Version number in front of each endpoint seems to work pretty good.</p>\\n<p>The first thing that comes in mind when talking about discovering web services is Web Services Description Language(WSDL). Before the major adoption of REST principles, people would create APIs in different forms. And so a way to describe them was necessary. That's where WSDL would take action. REST on the other hand is not the same. When we hear an API is REST compliant, we know that uses the common HTTP verbs, can return/accept XML or JSON and respond with the known HTTP statuses codes. That is what REST APIs is all about.</p>\\n<p>Nevertheless, I would say that machines that talk to each other, that are indeed able to discover each other's resources, is a tasty subject and I'm pretty sure that we will see it really soon. At the mean time, let's focus on making our APIs usable and understandable with bare eye.</p>\\n<p>Here are some references you can use if you want to make your API's discoverable. You can check out these great specs about describing your API through it's responses. I am not sure how these can be widely adopted, but once they do, we should expect it to go big. Never used them, so I am expecting from you. Google's also has looked into this and came out with some really fascinated results, be sure to check them also.</p>\\n<p><a href=\\\"http://micro-api.org/\\\">http://micro-api.org/</a>\\n<a href=\\\"http://jsonapi.org/\\\">http://jsonapi.org/</a>\\n<a href=\\\"http://www.odata.org/\\\">http://www.odata.org/</a>\\n<a href=\\\"https://developers.google.com/discovery/\\\">https://developers.google.com/discovery/</a></p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/making-a-rest-api-discoverable/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2015-08-24T14:39:27.000Z\",\"path\":\"/making-a-rest-api-discoverable/\",\"tags\":\"rest, api\",\"title\":\"Making a REST API discoverable\",\"draft\":null}},{\"excerpt\":\"You won’t rush an architect. You don’t want to see your house becoming dust at the next earthquake.  You won’t rush your hairdresser. You don’t want to leave that place with one ear. You won’t rush your dentist. You can’t handle the pain. You won’t...\",\"html\":\"<p>You won’t rush an architect. You don’t want to see your house becoming dust at the next earthquake. </p>\\n<p>You won’t rush your hairdresser. You don’t want to leave that place with one ear.</p>\\n<p>You won’t rush your dentist. You can’t handle the pain.</p>\\n<p>You won’t rush your local restaurant chef. You know good beef takes time to cook.</p>\\n<p>You won’t rush your wife to deliver your baby in less than 9 months. Why would you?</p>\\n<p>But you will rush your developer to build the next Facebook in 48 hours.</p>\\n<p>It makes sense.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/it-makes-sense/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-07-15T18:38:24.000Z\",\"path\":\"/it-makes-sense/\",\"tags\":null,\"title\":\"It makes sense\",\"draft\":null}},{\"excerpt\":\"First, become the best in the room. Then find a room where everyone is better than you. Repeat. I know this piece is like 20 words long but could it be a spark for a great conversation? Leave your comment...\",\"html\":\"<ul>\\n<li>First, become the best in the room.</li>\\n<li>Then find a room where everyone is better than you.</li>\\n<li>Repeat.</li>\\n</ul>\\n<p>I know this piece is like 20 words long but could it be a spark for a great conversation?</p>\\n<p>Leave your comment...</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/are-you-the-best-in-the-room/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-07-11T15:07:57.000Z\",\"path\":\"/are-you-the-best-in-the-room/\",\"tags\":null,\"title\":\"Are you the best in the room?\",\"draft\":null}}],\"page\":6,\"pagesSum\":14,\"prevPath\":\"/page/5\",\"nextPath\":\"/page/7\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/page-6.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/page-6.json\n// module chunks = 195745506856481"],"sourceRoot":""}