{"version":3,"sources":["webpack:///path---automated-gui-testing-solutions-4ca187589720d85e1198.js","webpack:///./.cache/json/automated-gui-testing-solutions.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/automated-gui-testing-solutions.json","module","exports","data","site","siteMetadata","title","description","siteUrl","markdownRemark","html","excerpt","frontmatter","date","path","tags","draft","pathContext","prev","id","timeToRead","next"],"mappings":"AAAAA,cAAc,iBAERC,yFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,YAAA,2LAAAC,QAAA,+BAAiRC,gBAAmBC,KAAA,w2FAAAC,QAAA,6IAAAC,aAAgiGC,KAAA,mBAAAC,KAAA,oCAAAC,KAAA,oCAAAT,MAAA,kCAAAU,MAAA,QAAyKC,aAAgBC,MAAQP,QAAA,8PAAAD,KAAA,szEAAqvDS,GAAA,4IAAAC,WAAA,EAAAR,aAA0jCC,KAAA,2BAAAC,KAAA,yCAAAC,KAAA,UAAAT,MAAA,yCAAAU,MAAA,OAAkKK,MAASV,QAAA,+PAAAD,KAAA,sYAAAS,GAAA,oJAAAC,WAAA,EAAAR,aAA60BC,KAAA,2BAAAC,KAAA,iDAAAC,KAAA,WAAAT,MAAA,gDAAAU,MAAA","file":"path---automated-gui-testing-solutions-4ca187589720d85e1198.js","sourcesContent":["webpackJsonp([226324846201506],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/automated-gui-testing-solutions.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}},\"markdownRemark\":{\"html\":\"<p>I gave a talk entitled <a href=\\\"http://slides.com/kostasbariotis/tdd-nodejs\\\">TDD with Node.js</a> in the <del>latest</del> <a href=\\\"https://www.meetup.com/Thessaloniki-Node-js-Meetup/\\\">SKGNode.js meetup</a>. I explained the concept of TDD and described my tools of choice for integrating the TDD flow with Node.js. It was great.</p>\\n<p>I didn't got into GUI testing and I saw a major interest on that. So I decided to take a look at the current state of GUI testing. Here are the main tools that I came up with:</p>\\n<h2>Zombie.js</h2>\\n<p><a href=\\\"http://zombie.js.org/\\\">Zombie</a> uses <a href=\\\"https://github.com/tmpvar/jsdom\\\">jsdom</a> to parse the required HTML and Javascript and then simulate the desired behaviour. I find it a great tool for testing basic functionality in small apps.</p>\\n<p>JSDom will create an in memory representation of the DOM and execute any Javascript dependencies so you can do a real testing scenario. Since it doesn't uses a real browser engine you can't find abnormalities of real world situations. So you can't rely on it for cross browser compatibility.</p>\\n<p>I got very frustrated while trying to test AJAX powered pages. For SPA apps, Zombie wouldn't be an ideal solution.</p>\\n<h2>Casper.js</h2>\\n<p><a href=\\\"http://casperjs.org/\\\">Casper</a> on the other hand, is a wrapper around <a href=\\\"http://phantomjs.org/\\\">Phantom.js</a> which utilises a <a href=\\\"https://webkit.org/\\\">Webkit</a> headless browser and will do a full rendering of your web page in order to test it. Since you will have a full representation of your site you can even <a href=\\\"https://github.com/sindresorhus/pageres\\\">take screenshots for easier QA</a>.</p>\\n<p>Casper.js has neat documentation and it's API is really easy to follow and adopt.</p>\\n<h2>Nightwatch.js</h2>\\n<p>Now, on the heavy side, we have <a href=\\\"http://www.seleniumhq.org/\\\">Selenium</a>. Selenium is a set of projects. It started off by auto running browsers and injecting code into them so we can test it. Since then, browsers vendors kept evolving and expose a full set of control over their browsers so Selenium has native support over those, with the <a href=\\\"http://www.seleniumhq.org/projects/webdriver/\\\">Selenium WebDriver</a>.</p>\\n<p>You will have to install all the browsers you need to test locally and then use Selenium to run tests on them. It's pretty basic.</p>\\n<p>Selenium's internals and configuration is a bit overcomplicated and if you don't need it, you don't have to get into it. <a href=\\\"http://nightwatchjs.org/\\\">Nightwatch</a> is a great layer of abstraction on top of Selenium that will do all the heavy work for you.</p>\\n<h1>At the end</h1>\\n<p>I am sure there are tone of other solutions out there. Although, you will have to do a research on your own before starting your GUI testing journey, at then end just pick one and start.</p>\\n<p>Are you using something already? What's that?</p>\",\"excerpt\":\"I gave a talk entitled  TDD with Node.js  in the  latest   SKGNode.js meetup . I explained the concept of TDD and described my tools of...\",\"frontmatter\":{\"date\":\"January 08, 2016\",\"path\":\"/automated-gui-testing-solutions/\",\"tags\":\"GUI, javascript, Testing, node.js\",\"title\":\"Automated GUI Testing Solutions\",\"draft\":null}}},\"pathContext\":{\"prev\":{\"excerpt\":\"As of MongoDB 3.2, a  new feature  has been added that introduces a left outer join for the first time.  is part of the MongoDB aggregation pipeline. It's a separate stage and the syntax is really simple: The above command will fetch every document...\",\"html\":\"<p>As of MongoDB 3.2, a <a href=\\\"https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/\\\">new feature</a> has been added that introduces a left outer join for the first time.</p>\\n<p><code>$lookup</code> is part of the MongoDB aggregation pipeline. It's a separate stage and the syntax is really simple:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>db<span class=\\\"token punctuation\\\">.</span>orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">aggregate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      $lookup<span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"inventory\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          localField<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"item\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          foreignField<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sku\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"inventory_docs\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The above command will fetch every document from the orders collection with the inventory_docs field in each one of them, populated with the matched documents from the inventory collection.</p>\\n<p>One will first notice that there is no way to specify matching conditions for the records to be joining the document. My hypothesis is that you're using an SQL data store in case you have many and complex relations between your entities. But in case that you are using a MongoDB data store while having that much relations, you will be disappointed.</p>\\n<p>Mongo's <code>$lookup</code> stage isn't coming to a step closer to traditional SQL join. It seems like a nice tool to have in your aggregation toolbox, but it won't cover you full if you need to do relational queries.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/mongodb-aggregation-lookup-for-joins/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2016-01-28T17:15:54.000Z\",\"path\":\"/mongodb-aggregation-lookup-for-joins/\",\"tags\":\"mongodb\",\"title\":\"MongoDB Aggregation: $lookup for JOINs\",\"draft\":null}},\"next\":{\"excerpt\":\"Loved that article. So many insights. We all could gain a lot from each other's experiences. I truly believe that and that's why I started this blog in the first place. https://medium.com/@mitchellharper/28-things-i-d-do-differently-next-time-around...\",\"html\":\"<p>Loved that article. So many insights. We all could gain a lot from each other's experiences. I truly believe that and that's why I started this blog in the first place.</p>\\n<p><a href=\\\"https://medium.com/@mitchellharper/28-things-i-d-do-differently-next-time-around-f1f72d6a05ce\\\">https://medium.com/@mitchellharper/28-things-i-d-do-differently-next-time-around-f1f72d6a05ce</a></p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/28-things-id-do-differently-next-time-around/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-12-30T03:49:16.408Z\",\"path\":\"/28-things-id-do-differently-next-time-around/\",\"tags\":\"Startups\",\"title\":\"28 things Iâ€™d do differently next time around\",\"draft\":null}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---automated-gui-testing-solutions-4ca187589720d85e1198.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}},\"markdownRemark\":{\"html\":\"<p>I gave a talk entitled <a href=\\\"http://slides.com/kostasbariotis/tdd-nodejs\\\">TDD with Node.js</a> in the <del>latest</del> <a href=\\\"https://www.meetup.com/Thessaloniki-Node-js-Meetup/\\\">SKGNode.js meetup</a>. I explained the concept of TDD and described my tools of choice for integrating the TDD flow with Node.js. It was great.</p>\\n<p>I didn't got into GUI testing and I saw a major interest on that. So I decided to take a look at the current state of GUI testing. Here are the main tools that I came up with:</p>\\n<h2>Zombie.js</h2>\\n<p><a href=\\\"http://zombie.js.org/\\\">Zombie</a> uses <a href=\\\"https://github.com/tmpvar/jsdom\\\">jsdom</a> to parse the required HTML and Javascript and then simulate the desired behaviour. I find it a great tool for testing basic functionality in small apps.</p>\\n<p>JSDom will create an in memory representation of the DOM and execute any Javascript dependencies so you can do a real testing scenario. Since it doesn't uses a real browser engine you can't find abnormalities of real world situations. So you can't rely on it for cross browser compatibility.</p>\\n<p>I got very frustrated while trying to test AJAX powered pages. For SPA apps, Zombie wouldn't be an ideal solution.</p>\\n<h2>Casper.js</h2>\\n<p><a href=\\\"http://casperjs.org/\\\">Casper</a> on the other hand, is a wrapper around <a href=\\\"http://phantomjs.org/\\\">Phantom.js</a> which utilises a <a href=\\\"https://webkit.org/\\\">Webkit</a> headless browser and will do a full rendering of your web page in order to test it. Since you will have a full representation of your site you can even <a href=\\\"https://github.com/sindresorhus/pageres\\\">take screenshots for easier QA</a>.</p>\\n<p>Casper.js has neat documentation and it's API is really easy to follow and adopt.</p>\\n<h2>Nightwatch.js</h2>\\n<p>Now, on the heavy side, we have <a href=\\\"http://www.seleniumhq.org/\\\">Selenium</a>. Selenium is a set of projects. It started off by auto running browsers and injecting code into them so we can test it. Since then, browsers vendors kept evolving and expose a full set of control over their browsers so Selenium has native support over those, with the <a href=\\\"http://www.seleniumhq.org/projects/webdriver/\\\">Selenium WebDriver</a>.</p>\\n<p>You will have to install all the browsers you need to test locally and then use Selenium to run tests on them. It's pretty basic.</p>\\n<p>Selenium's internals and configuration is a bit overcomplicated and if you don't need it, you don't have to get into it. <a href=\\\"http://nightwatchjs.org/\\\">Nightwatch</a> is a great layer of abstraction on top of Selenium that will do all the heavy work for you.</p>\\n<h1>At the end</h1>\\n<p>I am sure there are tone of other solutions out there. Although, you will have to do a research on your own before starting your GUI testing journey, at then end just pick one and start.</p>\\n<p>Are you using something already? What's that?</p>\",\"excerpt\":\"I gave a talk entitled  TDD with Node.js  in the  latest   SKGNode.js meetup . I explained the concept of TDD and described my tools of...\",\"frontmatter\":{\"date\":\"January 08, 2016\",\"path\":\"/automated-gui-testing-solutions/\",\"tags\":\"GUI, javascript, Testing, node.js\",\"title\":\"Automated GUI Testing Solutions\",\"draft\":null}}},\"pathContext\":{\"prev\":{\"excerpt\":\"As of MongoDB 3.2, a  new feature  has been added that introduces a left outer join for the first time.  is part of the MongoDB aggregation pipeline. It's a separate stage and the syntax is really simple: The above command will fetch every document...\",\"html\":\"<p>As of MongoDB 3.2, a <a href=\\\"https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/\\\">new feature</a> has been added that introduces a left outer join for the first time.</p>\\n<p><code>$lookup</code> is part of the MongoDB aggregation pipeline. It's a separate stage and the syntax is really simple:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>db<span class=\\\"token punctuation\\\">.</span>orders<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">aggregate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      $lookup<span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"inventory\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          localField<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"item\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          foreignField<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"sku\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          <span class=\\\"token keyword\\\">as</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"inventory_docs\\\"</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>The above command will fetch every document from the orders collection with the inventory_docs field in each one of them, populated with the matched documents from the inventory collection.</p>\\n<p>One will first notice that there is no way to specify matching conditions for the records to be joining the document. My hypothesis is that you're using an SQL data store in case you have many and complex relations between your entities. But in case that you are using a MongoDB data store while having that much relations, you will be disappointed.</p>\\n<p>Mongo's <code>$lookup</code> stage isn't coming to a step closer to traditional SQL join. It seems like a nice tool to have in your aggregation toolbox, but it won't cover you full if you need to do relational queries.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/mongodb-aggregation-lookup-for-joins/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2016-01-28T17:15:54.000Z\",\"path\":\"/mongodb-aggregation-lookup-for-joins/\",\"tags\":\"mongodb\",\"title\":\"MongoDB Aggregation: $lookup for JOINs\",\"draft\":null}},\"next\":{\"excerpt\":\"Loved that article. So many insights. We all could gain a lot from each other's experiences. I truly believe that and that's why I started this blog in the first place. https://medium.com/@mitchellharper/28-things-i-d-do-differently-next-time-around...\",\"html\":\"<p>Loved that article. So many insights. We all could gain a lot from each other's experiences. I truly believe that and that's why I started this blog in the first place.</p>\\n<p><a href=\\\"https://medium.com/@mitchellharper/28-things-i-d-do-differently-next-time-around-f1f72d6a05ce\\\">https://medium.com/@mitchellharper/28-things-i-d-do-differently-next-time-around-f1f72d6a05ce</a></p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/28-things-id-do-differently-next-time-around/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-12-30T03:49:16.408Z\",\"path\":\"/28-things-id-do-differently-next-time-around/\",\"tags\":\"Startups\",\"title\":\"28 things Iâ€™d do differently next time around\",\"draft\":null}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/automated-gui-testing-solutions.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/automated-gui-testing-solutions.json\n// module chunks = 226324846201506"],"sourceRoot":""}