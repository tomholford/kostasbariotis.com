{"version":3,"sources":["webpack:///path---drafts-page-2-ec12b7aaa0497a1e8be2.js","webpack:///./.cache/json/drafts-page-2.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/drafts-page-2.json","module","exports","data","site","siteMetadata","title","description","siteUrl","pathContext","posts","excerpt","html","id","timeToRead","frontmatter","date","path","tags","draft","page","pagesSum","prevPath","nextPath"],"mappings":"AAAAA,cAAc,iBAERC,uEACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,YAAA,2LAAAC,QAAA,gCAAkRC,aAAgBC,QAAUC,QAAA,+PAAAC,KAAA,+zBAAAC,GAAA,4HAAAC,WAAA,EAAAC,aAA8uCC,KAAA,2BAAAC,KAAA,gCAAAC,KAAA,KAAAZ,MAAA,uBAAAa,OAAA,KAAoIR,QAAA,8PAAAC,KAAA,6jEAAAC,GAAA,iIAAAC,WAAA,EAAAC,aAAg/EC,KAAA,2BAAAC,KAAA,qCAAAC,KAAA,KAAAZ,MAAA,4BAAAa,OAAA,KAA8IR,QAAA,mBAAAC,KAAA,0BAAAC,GAAA,sIAAAC,WAAA,EAAAC,aAAuOC,KAAA,2BAAAC,KAAA,0CAAAC,KAAA,KAAAZ,MAAA,iCAAAa,OAAA,KAAwJR,QAAA,gQAAAC,KAAA,6pHAAAC,GAAA,+GAAAC,WAAA,EAAAC,aAAgkIC,KAAA,2BAAAC,KAAA,mBAAAC,KAAA,KAAAZ,MAAA,2BAAAa,OAAA,KAA2HR,QAAA,wPAAAC,KAAA,u1CAAAC,GAAA,4HAAAC,WAAA,EAAAC,aAA+vDC,KAAA,2BAAAC,KAAA,gCAAAC,KAAA,KAAAZ,MAAA,uBAAAa,OAAA,KAAkIC,KAAA,EAAAC,SAAA,EAAAC,SAAA,iBAAAC,SAAA","file":"path---drafts-page-2-ec12b7aaa0497a1e8be2.js","sourcesContent":["webpackJsonp([139912377317252],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/drafts-page-2.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Great, so finished your newly designed REST API that will back up your upcoming platform. You are about to hit live and you are expecting a fair amount of visitors, but there is the possibility of overcoming that amount and you want to test your API...\",\"html\":\"<p>Great, so finished your newly designed REST API that will back up your upcoming platform. You are about to hit live and you are expecting a fair amount of visitors, but there is the possibility of overcoming that amount and you want to test your API to see how far it can go.</p>\\n<p>Enter stress tests. Stress tests can simulate users that come and hit requests over your API. The frequency of those requests is the key metric here and what you really want to know is how much you can afford.</p>\\n<p>The most well known stress test utility out there is Apache's AB. If you have installed Apache already you also have installed AB. So fire up your console, write <code>ab</code> and hit Enter.</p>\\n<p>AB is benchmarking tool for Apache servers, but you can use it with every HTTP serving platforms, such as Nodejs apps.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/rest-api-stress-test/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2016-11-01T00:00:00.000Z\",\"path\":\"/drafts/rest-api-stress-test/\",\"tags\":null,\"title\":\"REST API Stress Test\",\"draft\":true}},{\"excerpt\":\"I am Software Engineer being paid two times over the standard Greek wage. But why you say. When I was growing up I had to deal with two things: a) I didn't had the money to do anything I wanted to do and b) I had to do shitty jobs to get that money...\",\"html\":\"<p>I am Software Engineer being paid two times over the standard Greek wage. But why you say.</p>\\n<p>When I was growing up I had to deal with two things: a) I didn't had the money to do anything I wanted to do and b) I had to do shitty jobs to get that money.</p>\\n<p>So I had to find a solution. I was introduced to programming and everyone were talking about how is the job of the future. I fall in love with it since my first key strokes. I made my decision at that moment.</p>\\n<p>I had a mentor back then. My cousin. 20 years of experience more than me and he really wanted to stack them all in my head. Once he said to me: \\\"There are two options in life. You can either be a cow, walking around the same grass land your whole life or you can be a hawk, flying and traveling every day and watching the world from the sky. You got choose.\\\" That completely messed up my childhood. I had to find a way to be hawk.</p>\\n<p>I don't like long term goals. Even for my longest goals I will break them into smaller tasks and commit to those.</p>\\n<p>My most long term goal was and still is one. Is the one that I set when I was a kid in order to solve my problems.</p>\\n<p>To be a high paid professional in my industry until my thirtieth birthday.</p>\\n<p>Let's break that down:</p>\\n<p>Professional: I love programming and that is the primary reason I do it for living. If I didn't do it for any reason, I would probably doing it in my free time. I wrote my first lines of code in the age of 10. That was it for me. Right there I discovered what I wanted to do in life.</p>\\n<p>High paid: Not just paying the bills. I want to be high paid. Have you ever declined a suggestion for a road trip or even to get out for some drinks, cause you couldn't afford it? Yeah, I know. I don't want this. I want money to not be problem. They're supposed to be the ticket, not the barrier.</p>\\n<p>The original goal was until the age of 25. I failed, so I rescheduled it. If I were to predict my next deadline, I would say I won't fail this time. Even if I do, I will just set the next goal and move on. I had enough.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/the-reason-i-do-what-i-do/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2016-10-20T00:00:00.000Z\",\"path\":\"/drafts/the-reason-i-do-what-i-do/\",\"tags\":null,\"title\":\"The reason I do what I do\",\"draft\":true}},{\"excerpt\":\"The Error object\",\"html\":\"<p>The Error object</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/the-error-object-in-javascript/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2016-10-10T00:00:00.000Z\",\"path\":\"/drafts/the-error-object-in-javascript/\",\"tags\":null,\"title\":\"The error object in Javascript\",\"draft\":true}},{\"excerpt\":\"A few weeks ago, I did my Microservices talk at Thessaloniki's Ruby meetup. It was an awesome experience. There was also a talk there, entitled Testing Demystified, after me. The excellent engineer gave a lot of food for thought about testing. I wasn...\",\"html\":\"<p>A few weeks ago, I did my Microservices talk at Thessaloniki's Ruby meetup. It was an awesome experience. There was also a talk there, entitled Testing Demystified, after me. The excellent engineer gave a lot of food for thought about testing. I wasn't aware of most of them.</p>\\n<p>So I decided to write a similar post to let me clear my head on the subject.</p>\\n<h1>Test Driven Development</h1>\\n<p>The most common term you will meet in software is TDD. It's concept is actually simple. We write tests before start coding. <a href=\\\"http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530\\\">Kent Beck</a> describes it like this:</p>\\n<ol>\\n<li>Red</li>\\n<li>Green</li>\\n<li>Refactor</li>\\n</ol>\\n<p>We first write our tests based on our specifications. We run them and of course they won't succeed thus are going to be red. Then we write the smallest amount of code to make our tests pass and meet our requirements. Once we get the green flag we start refactoring and cleaning our code.</p>\\n<h2>Unit Testing</h2>\\n<p>Unit tests are the start of every test suite. Before starting to unit test, one must define what a unit is, which may vary from team to team. The well known rule is that a unit is the smallest piece of code that can be tested. Regardless of if it's a function, a class or even a whole system in some cases.</p>\\n<p>Unit tests must run fast and run often. To achieve maximum speed,  they are being run in isolation. Thus mocking and stubbing of dependent units happens often. For example, a database can be mocked instead of actually hitting it.</p>\\n<p>I like to have my unit tests independent from the whole test suite. I use a watch process to run them every time I change something in the code. This way I cannot forget to make sure that they are passing, before commit.</p>\\n<h2>Components/Integration Testing</h2>\\n<p>After writing our unit tests, next are Components Tests. Those are used to test units in combination. Units that are working together should be tested by Components Testing.</p>\\n<p>We should mock external services that are not part of the requirement under testing.</p>\\n<h2>End to End/System Testing</h2>\\n<p>Finally, we are testing anythings, from the User Interface to the Database. Testing each intermediate component. To make sure that our system meets business requirements, System Testing happens by the user perspective.</p>\\n<h1>Property Testing</h1>\\n<p>An important concept in testing a system is Property Testing. Instead of taking certain test cases, we are instructing our system to take different values and test against them. This way we can even find cases that we didn't thought. Property testing can be applied at any level of our test suite.</p>\\n<h1>How much to test</h1>\\n<p>A question that usually shows up is \\\"How much should I be testing\\\". While a possible good answer could be \\\"As much as you can\\\" this is often not the case. Testing can't always be a priority. There is a point in the size of every test suite that once we pass it, there is no more the need to test. Unless new requirements are introduced, we are running the suite to be sure that nothing breaks.</p>\\n<p>Before you try to answer the \\\"how much to test\\\", let's take a look into the \\\"what to test\\\". The concept says that to put minimum effort and investment into manual and GUI testing, we should invest into the lower levels. Manual is by default more expensive and more fault tolerant. Bugs are more possible to pass by manual tests than automated unit tests.</p>\\n<p>We can't eliminate manual testing and surely we can't automate it. But we can be sure that having a stronger automated test foundation we leave fewer errors to be found in the upper levels of testing.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/testing/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2016-05-01T00:00:00.000Z\",\"path\":\"/drafts/testing/\",\"tags\":null,\"title\":\"Testing Software Systems\",\"draft\":true}},{\"excerpt\":\"Last week, me and Goodvidio's CTO sit down to come up with a solution. We were in a need of an auditing service that will track down every movement inside our system. Searching in Google we didn't find any real world example either any useful...\",\"html\":\"<p>Last week, me and Goodvidio's CTO sit down to come up with a solution. We were in a need of an auditing service that will track down every movement inside our system.</p>\\n<p>Searching in Google we didn't find any real world example either any useful information as we expected. We had only our experience from the various systems we've used and how they are implementing such things. But again, we had never meet an isolated auditing service. That was our goal.</p>\\n<p>Here are my notes from the meeting.</p>\\n<ul>\\n<li>Our goal was to track down actions happens anywhere in the system</li>\\n<li>We should track the action, the actor of that action(whether it's an actual user or another service) and a lot of metadata about the action.</li>\\n<li>Actions are application level logic. This means that each of our applications (otherwise services) define their actions that want our service to track. There are no limitations, validations or anything like that. There are rules that must be followed but other than that, you are free to track what ever you want.</li>\\n<li>We found a solution to allow the presenter of the audits to not have to render the message it self, instead we are generating a message directly from the data we receive so the presenter can take ready messages to display. Of course, it has the choice to rerender them itself.</li>\\n</ul>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/our-auditing-service/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-11-15T00:00:00.000Z\",\"path\":\"/drafts/our-auditing-service/\",\"tags\":null,\"title\":\"Our auditing service\",\"draft\":true}}],\"page\":2,\"pagesSum\":4,\"prevPath\":\"/drafts/page/1\",\"nextPath\":\"/drafts/page/3\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---drafts-page-2-ec12b7aaa0497a1e8be2.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}}},\"pathContext\":{\"posts\":[{\"excerpt\":\"Great, so finished your newly designed REST API that will back up your upcoming platform. You are about to hit live and you are expecting a fair amount of visitors, but there is the possibility of overcoming that amount and you want to test your API...\",\"html\":\"<p>Great, so finished your newly designed REST API that will back up your upcoming platform. You are about to hit live and you are expecting a fair amount of visitors, but there is the possibility of overcoming that amount and you want to test your API to see how far it can go.</p>\\n<p>Enter stress tests. Stress tests can simulate users that come and hit requests over your API. The frequency of those requests is the key metric here and what you really want to know is how much you can afford.</p>\\n<p>The most well known stress test utility out there is Apache's AB. If you have installed Apache already you also have installed AB. So fire up your console, write <code>ab</code> and hit Enter.</p>\\n<p>AB is benchmarking tool for Apache servers, but you can use it with every HTTP serving platforms, such as Nodejs apps.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/rest-api-stress-test/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2016-11-01T00:00:00.000Z\",\"path\":\"/drafts/rest-api-stress-test/\",\"tags\":null,\"title\":\"REST API Stress Test\",\"draft\":true}},{\"excerpt\":\"I am Software Engineer being paid two times over the standard Greek wage. But why you say. When I was growing up I had to deal with two things: a) I didn't had the money to do anything I wanted to do and b) I had to do shitty jobs to get that money...\",\"html\":\"<p>I am Software Engineer being paid two times over the standard Greek wage. But why you say.</p>\\n<p>When I was growing up I had to deal with two things: a) I didn't had the money to do anything I wanted to do and b) I had to do shitty jobs to get that money.</p>\\n<p>So I had to find a solution. I was introduced to programming and everyone were talking about how is the job of the future. I fall in love with it since my first key strokes. I made my decision at that moment.</p>\\n<p>I had a mentor back then. My cousin. 20 years of experience more than me and he really wanted to stack them all in my head. Once he said to me: \\\"There are two options in life. You can either be a cow, walking around the same grass land your whole life or you can be a hawk, flying and traveling every day and watching the world from the sky. You got choose.\\\" That completely messed up my childhood. I had to find a way to be hawk.</p>\\n<p>I don't like long term goals. Even for my longest goals I will break them into smaller tasks and commit to those.</p>\\n<p>My most long term goal was and still is one. Is the one that I set when I was a kid in order to solve my problems.</p>\\n<p>To be a high paid professional in my industry until my thirtieth birthday.</p>\\n<p>Let's break that down:</p>\\n<p>Professional: I love programming and that is the primary reason I do it for living. If I didn't do it for any reason, I would probably doing it in my free time. I wrote my first lines of code in the age of 10. That was it for me. Right there I discovered what I wanted to do in life.</p>\\n<p>High paid: Not just paying the bills. I want to be high paid. Have you ever declined a suggestion for a road trip or even to get out for some drinks, cause you couldn't afford it? Yeah, I know. I don't want this. I want money to not be problem. They're supposed to be the ticket, not the barrier.</p>\\n<p>The original goal was until the age of 25. I failed, so I rescheduled it. If I were to predict my next deadline, I would say I won't fail this time. Even if I do, I will just set the next goal and move on. I had enough.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/the-reason-i-do-what-i-do/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":2,\"frontmatter\":{\"date\":\"2016-10-20T00:00:00.000Z\",\"path\":\"/drafts/the-reason-i-do-what-i-do/\",\"tags\":null,\"title\":\"The reason I do what I do\",\"draft\":true}},{\"excerpt\":\"The Error object\",\"html\":\"<p>The Error object</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/the-error-object-in-javascript/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2016-10-10T00:00:00.000Z\",\"path\":\"/drafts/the-error-object-in-javascript/\",\"tags\":null,\"title\":\"The error object in Javascript\",\"draft\":true}},{\"excerpt\":\"A few weeks ago, I did my Microservices talk at Thessaloniki's Ruby meetup. It was an awesome experience. There was also a talk there, entitled Testing Demystified, after me. The excellent engineer gave a lot of food for thought about testing. I wasn...\",\"html\":\"<p>A few weeks ago, I did my Microservices talk at Thessaloniki's Ruby meetup. It was an awesome experience. There was also a talk there, entitled Testing Demystified, after me. The excellent engineer gave a lot of food for thought about testing. I wasn't aware of most of them.</p>\\n<p>So I decided to write a similar post to let me clear my head on the subject.</p>\\n<h1>Test Driven Development</h1>\\n<p>The most common term you will meet in software is TDD. It's concept is actually simple. We write tests before start coding. <a href=\\\"http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530\\\">Kent Beck</a> describes it like this:</p>\\n<ol>\\n<li>Red</li>\\n<li>Green</li>\\n<li>Refactor</li>\\n</ol>\\n<p>We first write our tests based on our specifications. We run them and of course they won't succeed thus are going to be red. Then we write the smallest amount of code to make our tests pass and meet our requirements. Once we get the green flag we start refactoring and cleaning our code.</p>\\n<h2>Unit Testing</h2>\\n<p>Unit tests are the start of every test suite. Before starting to unit test, one must define what a unit is, which may vary from team to team. The well known rule is that a unit is the smallest piece of code that can be tested. Regardless of if it's a function, a class or even a whole system in some cases.</p>\\n<p>Unit tests must run fast and run often. To achieve maximum speed,  they are being run in isolation. Thus mocking and stubbing of dependent units happens often. For example, a database can be mocked instead of actually hitting it.</p>\\n<p>I like to have my unit tests independent from the whole test suite. I use a watch process to run them every time I change something in the code. This way I cannot forget to make sure that they are passing, before commit.</p>\\n<h2>Components/Integration Testing</h2>\\n<p>After writing our unit tests, next are Components Tests. Those are used to test units in combination. Units that are working together should be tested by Components Testing.</p>\\n<p>We should mock external services that are not part of the requirement under testing.</p>\\n<h2>End to End/System Testing</h2>\\n<p>Finally, we are testing anythings, from the User Interface to the Database. Testing each intermediate component. To make sure that our system meets business requirements, System Testing happens by the user perspective.</p>\\n<h1>Property Testing</h1>\\n<p>An important concept in testing a system is Property Testing. Instead of taking certain test cases, we are instructing our system to take different values and test against them. This way we can even find cases that we didn't thought. Property testing can be applied at any level of our test suite.</p>\\n<h1>How much to test</h1>\\n<p>A question that usually shows up is \\\"How much should I be testing\\\". While a possible good answer could be \\\"As much as you can\\\" this is often not the case. Testing can't always be a priority. There is a point in the size of every test suite that once we pass it, there is no more the need to test. Unless new requirements are introduced, we are running the suite to be sure that nothing breaks.</p>\\n<p>Before you try to answer the \\\"how much to test\\\", let's take a look into the \\\"what to test\\\". The concept says that to put minimum effort and investment into manual and GUI testing, we should invest into the lower levels. Manual is by default more expensive and more fault tolerant. Bugs are more possible to pass by manual tests than automated unit tests.</p>\\n<p>We can't eliminate manual testing and surely we can't automate it. But we can be sure that having a stronger automated test foundation we leave fewer errors to be found in the upper levels of testing.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/testing/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":3,\"frontmatter\":{\"date\":\"2016-05-01T00:00:00.000Z\",\"path\":\"/drafts/testing/\",\"tags\":null,\"title\":\"Testing Software Systems\",\"draft\":true}},{\"excerpt\":\"Last week, me and Goodvidio's CTO sit down to come up with a solution. We were in a need of an auditing service that will track down every movement inside our system. Searching in Google we didn't find any real world example either any useful...\",\"html\":\"<p>Last week, me and Goodvidio's CTO sit down to come up with a solution. We were in a need of an auditing service that will track down every movement inside our system.</p>\\n<p>Searching in Google we didn't find any real world example either any useful information as we expected. We had only our experience from the various systems we've used and how they are implementing such things. But again, we had never meet an isolated auditing service. That was our goal.</p>\\n<p>Here are my notes from the meeting.</p>\\n<ul>\\n<li>Our goal was to track down actions happens anywhere in the system</li>\\n<li>We should track the action, the actor of that action(whether it's an actual user or another service) and a lot of metadata about the action.</li>\\n<li>Actions are application level logic. This means that each of our applications (otherwise services) define their actions that want our service to track. There are no limitations, validations or anything like that. There are rules that must be followed but other than that, you are free to track what ever you want.</li>\\n<li>We found a solution to allow the presenter of the audits to not have to render the message it self, instead we are generating a message directly from the data we receive so the presenter can take ready messages to display. Of course, it has the choice to rerender them itself.</li>\\n</ul>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/our-auditing-service/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-11-15T00:00:00.000Z\",\"path\":\"/drafts/our-auditing-service/\",\"tags\":null,\"title\":\"Our auditing service\",\"draft\":true}}],\"page\":2,\"pagesSum\":4,\"prevPath\":\"/drafts/page/1\",\"nextPath\":\"/drafts/page/3\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/drafts-page-2.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/drafts-page-2.json\n// module chunks = 139912377317252"],"sourceRoot":""}