{"version":3,"sources":["webpack:///path---drafts-ui-thread-free-db6e2564bd9a9e1e4284.js","webpack:///./.cache/json/drafts-ui-thread-free.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/drafts-ui-thread-free.json","module","exports","data","site","siteMetadata","title","description","siteUrl","markdownRemark","html","excerpt","frontmatter","date","path","tags","draft","pathContext","prev","id","timeToRead","next"],"mappings":"AAAAA,cAAc,iBAERC,+EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,YAAA,2LAAAC,QAAA,+BAAiRC,gBAAmBC,KAAA,23DAAAC,QAAA,iJAAAC,aAA0jEC,KAAA,mBAAAC,KAAA,0BAAAC,KAAA,KAAAT,MAAA,iBAAAU,OAAA,KAA+GC,aAAgBC,MAAQP,QAAA,gQAAAD,KAAA,yyBAAAS,GAAA,oHAAAC,WAAA,EAAAR,aAAktCC,KAAA,2BAAAC,KAAA,iBAAAC,KAAA,KAAAT,MAAA,kCAAAU,MAAA,OAA8HK,MAASV,QAAA,sFAAAD,KAAA,yPAAAS,GAAA,+HAAAC,WAAA,EAAAR,aAA4gBC,KAAA,2BAAAC,KAAA,4BAAAC,KAAA,cAAAT,MAAA,8BAAAU,MAAA","file":"path---drafts-ui-thread-free-db6e2564bd9a9e1e4284.js","sourcesContent":["webpackJsonp([184928335176708],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/drafts-ui-thread-free.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}},\"markdownRemark\":{\"html\":\"<p>With the rise of the upcoming <a href=\\\"http://www.w3.org/TR/workers/\\\">WebWorkers API</a> in the horizon, interesting things are emerging. And the one that got me go \\\"whhaaaaat??\\\" is the one that advices you to put all of your business logic inside a WebWorker. Whaaaaat?</p>\\n<p>A WebWorker is a separate thread that runs Javascript but has no access to the DOM or the <code>window</code> object. But it can do complex queries and loops, accessing core <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\\\">functions and APIs</a>, while you are letting the main thread, the UI thread, to handle the UI stuff only.</p>\\n<p>Rendering the DOM is so expensive, specially when it comes to complex interfaces we have nowadays. Not so long ago, the <a href=\\\"https://facebook.github.io/react/docs/reconciliation.html\\\">VirtualDOM</a> introduced which tried to speed up the rendering process by rendering only what actually changed, instead of re-rendering the whole page. But, that's not enough apparently, since even such few changes can't be handle well by low powered devices such as mobiles phones and watches.</p>\\n<p>In order to keep the 60fpm barrier, we are completely freeing the main thread to be able to handle the rendering only and we start WebWorkers to handle our business logic.</p>\\n<p>I found <a href=\\\"http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org\\\">two</a> <a href=\\\"https://medium.com/@nsisodiya/flux-inside-web-workers-cc51fb463882#.iv69h6ih2\\\">great</a> examples of this concept. Both, they are suggesting keeping the whole app outside the main thread and send there only the patch of the changed DOM to be rendered. The UI thread can then handle only rendering and complex fancy animations.</p>\\n<p>Oh, by the way, Nodejs fans, <a href=\\\"https://github.com/nodejs/node/pull/2133\\\">Workers are coming</a>.</p>\",\"excerpt\":\"With the rise of the upcoming  WebWorkers API  in the horizon, interesting things are emerging. And the one that got me go \\\"whhaaaaat??\\\" is...\",\"frontmatter\":{\"date\":\"October 15, 2015\",\"path\":\"/drafts/ui-thread-free/\",\"tags\":null,\"title\":\"UI thread free\",\"draft\":true}}},\"pathContext\":{\"prev\":{\"excerpt\":\"User stories  are a part of every agile driven process that teams usually follow. Often, even a developer can be called to write a story, based on a business requirement, that will eventually be called to develop it. Here's an example: As a Developer...\",\"html\":\"<p><a href=\\\"https://en.wikipedia.org/wiki/User_story\\\">User stories</a> are a part of every agile driven process that teams usually follow.</p>\\n<p>Often, even a developer can be called to write a story, based on a business requirement, that will eventually be called to develop it. Here's an example:</p>\\n<p><em>As a Developer, I want to be able to filter Blog Posts by Category ID, so I can display a filtered table.</em></p>\\n<p>But one can easily be distracted and write a story based on their understanding of how consumers are using their code. Much like product owners.</p>\\n<p>Before you start, talk to your consumers. See how their are using your code or your REST API. Ask them for feedback and for possible hard times they have with it.</p>\\n<p>Then, write your user stories, based on that.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/user-stories/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-10-22T17:03:09.000Z\",\"path\":\"/user-stories/\",\"tags\":null,\"title\":\"User Stories as in User Stories\",\"draft\":null}},\"next\":{\"excerpt\":\"\\\"... and once you understand that, once you truly believe that, then you're free.\\\"\",\"html\":\"<blockquote>\\n<p>\\\"... and once you understand that, once you truly believe that, then you're free.\\\"</p>\\n</blockquote>\\n<iframe width=\\\"100%\\\" height=\\\"400px\\\" src=\\\"https://www.youtube.com/embed/8pTEmbeENF4\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/dont-know-what-im-doing/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-10-11T10:01:17.000Z\",\"path\":\"/dont-know-what-im-doing/\",\"tags\":\"programming\",\"title\":\"I don't know what I'm doing\",\"draft\":null}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---drafts-ui-thread-free-db6e2564bd9a9e1e4284.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Kostas Bariotis' Blog\",\"description\":\"I'm Kostas Bariotis, a web developer, a proud wanderer and a passionate doer. My mission is to write clean and efficient code, to solve problems on the web and to learn something more.\",\"siteUrl\":\"https://kostasbariotis.com\"}},\"markdownRemark\":{\"html\":\"<p>With the rise of the upcoming <a href=\\\"http://www.w3.org/TR/workers/\\\">WebWorkers API</a> in the horizon, interesting things are emerging. And the one that got me go \\\"whhaaaaat??\\\" is the one that advices you to put all of your business logic inside a WebWorker. Whaaaaat?</p>\\n<p>A WebWorker is a separate thread that runs Javascript but has no access to the DOM or the <code>window</code> object. But it can do complex queries and loops, accessing core <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Functions_and_classes_available_to_workers\\\">functions and APIs</a>, while you are letting the main thread, the UI thread, to handle the UI stuff only.</p>\\n<p>Rendering the DOM is so expensive, specially when it comes to complex interfaces we have nowadays. Not so long ago, the <a href=\\\"https://facebook.github.io/react/docs/reconciliation.html\\\">VirtualDOM</a> introduced which tried to speed up the rendering process by rendering only what actually changed, instead of re-rendering the whole page. But, that's not enough apparently, since even such few changes can't be handle well by low powered devices such as mobiles phones and watches.</p>\\n<p>In order to keep the 60fpm barrier, we are completely freeing the main thread to be able to handle the rendering only and we start WebWorkers to handle our business logic.</p>\\n<p>I found <a href=\\\"http://www.pocketjavascript.com/blog/2015/11/23/introducing-pokedex-org\\\">two</a> <a href=\\\"https://medium.com/@nsisodiya/flux-inside-web-workers-cc51fb463882#.iv69h6ih2\\\">great</a> examples of this concept. Both, they are suggesting keeping the whole app outside the main thread and send there only the patch of the changed DOM to be rendered. The UI thread can then handle only rendering and complex fancy animations.</p>\\n<p>Oh, by the way, Nodejs fans, <a href=\\\"https://github.com/nodejs/node/pull/2133\\\">Workers are coming</a>.</p>\",\"excerpt\":\"With the rise of the upcoming  WebWorkers API  in the horizon, interesting things are emerging. And the one that got me go \\\"whhaaaaat??\\\" is...\",\"frontmatter\":{\"date\":\"October 15, 2015\",\"path\":\"/drafts/ui-thread-free/\",\"tags\":null,\"title\":\"UI thread free\",\"draft\":true}}},\"pathContext\":{\"prev\":{\"excerpt\":\"User stories  are a part of every agile driven process that teams usually follow. Often, even a developer can be called to write a story, based on a business requirement, that will eventually be called to develop it. Here's an example: As a Developer...\",\"html\":\"<p><a href=\\\"https://en.wikipedia.org/wiki/User_story\\\">User stories</a> are a part of every agile driven process that teams usually follow.</p>\\n<p>Often, even a developer can be called to write a story, based on a business requirement, that will eventually be called to develop it. Here's an example:</p>\\n<p><em>As a Developer, I want to be able to filter Blog Posts by Category ID, so I can display a filtered table.</em></p>\\n<p>But one can easily be distracted and write a story based on their understanding of how consumers are using their code. Much like product owners.</p>\\n<p>Before you start, talk to your consumers. See how their are using your code or your REST API. Ask them for feedback and for possible hard times they have with it.</p>\\n<p>Then, write your user stories, based on that.</p>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/user-stories/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-10-22T17:03:09.000Z\",\"path\":\"/user-stories/\",\"tags\":null,\"title\":\"User Stories as in User Stories\",\"draft\":null}},\"next\":{\"excerpt\":\"\\\"... and once you understand that, once you truly believe that, then you're free.\\\"\",\"html\":\"<blockquote>\\n<p>\\\"... and once you understand that, once you truly believe that, then you're free.\\\"</p>\\n</blockquote>\\n<iframe width=\\\"100%\\\" height=\\\"400px\\\" src=\\\"https://www.youtube.com/embed/8pTEmbeENF4\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\",\"id\":\"/Users/Bariotis/Dev/develop/kostasbariotis.com/src/pages/dont-know-what-im-doing/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"date\":\"2015-10-11T10:01:17.000Z\",\"path\":\"/dont-know-what-im-doing/\",\"tags\":\"programming\",\"title\":\"I don't know what I'm doing\",\"draft\":null}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/drafts-ui-thread-free.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/drafts-ui-thread-free.json\n// module chunks = 184928335176708"],"sourceRoot":""}